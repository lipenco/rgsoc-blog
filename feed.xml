<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lipen.co</title>
  <subtitle>Today I Learned</subtitle>
  <id>http://lipen.co/til</id>
  <link href="http://lipen.co/til"/>
  <link href="http://lipen.co/til/feed.xml" rel="self"/>
  <updated>2014-02-21T00:00:00Z</updated>
  <author>
    <name>Magdalena Lipinska</name>
  </author>
  <entry>
    <title>Coffescript - JavaScript for Rubyists</title>
    <link rel="alternate" href="http://lipen.co/til/on-agile-rails-education.html"/>
    <id>http://lipen.co/til/on-agile-rails-education.html </id>
    <published>2014-02-21T00:00:00Z</published>
    <updated>2014-02-21T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Programming languages is like songs, we like the one we know.&lt;/p&gt;

&lt;p&gt;There is one reson why coffessscript is so beutiful. It was ispired by Ruby language. It is amazing how some of its&amp;#8217; idions make so much sense.&lt;/p&gt;

&lt;p&gt;No more semicolons, optional parenthasis and curly braces, no comas, white space sensitive - these are only begigning of benefit coffescript has to offer.&lt;/p&gt;

&lt;p&gt;Here are the 8 undespitable resons to love coffeescript:&lt;/p&gt;

&lt;h4 id='1_vars_are_long_gone'&gt;1. Vars are long gone&lt;/h4&gt;

&lt;p&gt;Ugliness if JS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var count, increment

var increment = function() {
  var total;
  count += 1;
  return total = &amp;quot;CoffeScript is &amp;quot; + count + &amp;quot;better than pure JS&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Beuty of CoffeeScript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count

increment -&amp;gt;
  count += 1
  total = &amp;quot;CoffeScript is &amp;quot; + count + &amp;quot;better than pure JS&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='2_imlicit_returns_just_like_in_ruby'&gt;2. Imlicit returns, just like in ruby.&lt;/h4&gt;

&lt;p&gt;beuty of CoffeeScript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;love -&amp;gt; 
  console.log &amp;quot;I &amp;lt;3 CoffeeScript&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uglynesss of JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var eat = function() {
  return console.log(&amp;quot;I &amp;lt;3 Javascript only a little bit&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='3_coffeescript_allow_you_use_defoult_options_even_though_it_looks_weird'&gt;3. CoffeeScript allow you use defoult options, even though it looks weird.&lt;/h4&gt;

&lt;p&gt;CoffeScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;love = (options {}) -&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Javascrip:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var love = functions(options) {
  if (options == null) {
    options = {};
  }
};&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='4_coffeescript_serves_spats'&gt;4. CoffeeScript serves spats.&lt;/h4&gt;

&lt;p&gt;Javascrip:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var perosn;

 person = {
   name: &amp;quot;Magda&amp;quot;
   addDislikesAboutJs: functions() {
     var arg = [].slice.call(arguments);
     return [].push.apply(this.dislakes, args);
   }
 };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CoffeScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; person = 
    name: &amp;quot;Magda&amp;quot;
    addDislikesAboutJs: (args...) -&amp;gt;
      @dislakes.push args ...&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='5_flow_control_as_beutifull_and_operators_and_or_is'&gt;5. Flow Control as beutifull and operators (and, or, is)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;  if true == true
    &amp;quot;Coffee is ok&amp;quot;

  if true != true then &amp;quot;Weird&amp;quot;

  if 1 &amp;gt; 0 then &amp;quot;Ok&amp;quot; else &amp;quot;NEGATIVE&amp;quot;

  alert &amp;quot;It&amp;#39;s cold!&amp;quot; if heat &amp;lt; 10

  if not true then &amp;quot;Panic&amp;quot;

  unless true
    &amp;quot;Panic&amp;quot;

  if true is 1
    &amp;quot;type coercion fail&amp;quot;

  if 10 == &amp;quot;+10&amp;quot; then &amp;quot;type coercion fail&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='6_existencial_operators'&gt;6. Existencial operators&lt;/h4&gt;

&lt;p&gt;CoffeeScript existential operator ? returns true unless a variable is null or undefined, similar to Ruby’s nil?:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   praise if brian?&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use it in place of the || operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  velocity = southern ? 40&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Coffescript has somthing similar to Active Support’s try method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  player.getLife()?.play()&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='7_string_interpolations'&gt;7. String Interpolations&lt;/h4&gt;

&lt;p&gt;So rubiest, it doesn&amp;#8217;t happen in pure JS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;quot;Hey, #{name} have a good day!!&amp;quot;  &lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='8_beuty_of_loops'&gt;8. Beuty of loops&lt;/h4&gt;

&lt;p&gt;Again, CoffeeScript comes to the rescue, with a beautiful syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for name in [&amp;quot;Roger&amp;quot;, &amp;quot;Roderick&amp;quot;, &amp;quot;Brian&amp;quot;] alert &amp;quot;Release #{name}&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need the current iteration index, just pass an extra argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  for name, i in [&amp;quot;Roger the pickpocket&amp;quot;, &amp;quot;Roderick the robber&amp;quot;] alert &amp;quot;#{i} - Release #{name}&amp;quot;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
</feed>
