<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lipen.co</title>
  <subtitle>Today I Learned</subtitle>
  <id>http://lipen.co/til</id>
  <link href="http://lipen.co/til"/>
  <link href="http://lipen.co/til/feed.xml" rel="self"/>
  <updated>2013-08-05T00:00:00Z</updated>
  <author>
    <name>Magdalena Lipinska</name>
  </author>
  <entry>
    <title>Event Listeners Enlightenment</title>
    <link rel="alternate" href="http://lipen.co/til/event-listener-enlightement.html"/>
    <id>http://lipen.co/til/event-listener-enlightement.html </id>
    <published>2013-08-05T00:00:00Z</published>
    <updated>2013-08-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It comes to me usually late as for a front-end developer but it comes with a great happiness. Usually with extensive shooting code in the dark. But it&amp;#8217;s better than asking coaches for right solution.&lt;/p&gt;

&lt;p&gt;My success for today is the &lt;a href='https://github.com/lipenco/impress.js-automated-presentation/blob/gh-pages/index.html'&gt;automated presentation script&lt;/a&gt; with data-duration attributes to enable user to set specific time for the slide display. Data-duration is the argument for the event listener function &amp;#8216;moving&amp;#8217; the presentation with set intervals.&lt;/p&gt;

&lt;h3 id='today_i_learned'&gt;Today I Learned:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The difference between &lt;a href='http://javascript.about.com/library/blstvsi.htm'&gt;setTimeout and setInterval&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;How to make event listeners listen to me.&lt;/li&gt;

&lt;li&gt;How to use typeof&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To sum up&lt;/em&gt;: No drama&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Such a Product Developer of Me</title>
    <link rel="alternate" href="http://lipen.co/til/such-product-developer-of-me.html"/>
    <id>http://lipen.co/til/such-product-developer-of-me.html </id>
    <published>2013-08-02T00:00:00Z</published>
    <updated>2013-08-02T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It is arguable if impress.js needs substeps for presentations for building suspense and not revealing all content at the first glance. Vox populi on GitHub said yes to substeps, Bartek said it is &amp;#8216;powerpoitish&amp;#8217; and impress.js should be kept simple.&lt;/p&gt;

&lt;p&gt;For me substeps feature is just another occasion to write my own JavaScript code and implement it with CSS animations.&lt;/p&gt;

&lt;p&gt;You can see &lt;a href='http://lipen.co/impress.js-substeps/'&gt;my work done here.&lt;/a&gt; with implemented event listeners for keyup.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s move to another task - build the script with will &amp;#8220;play&amp;#8221; presentation and changing slides according to data-duration attributes.&lt;/p&gt;

&lt;h3 id='today_i_learned'&gt;Today I Learned:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More about event listeners, more about switch&lt;/li&gt;

&lt;li&gt;And some Rails (rubymonsters in progress).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To sum up&lt;/em&gt;: Everything has been already invented, so be happy we have everything.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>On Tests</title>
    <link rel="alternate" href="http://lipen.co/til/on-test.html"/>
    <id>http://lipen.co/til/on-test.html </id>
    <published>2013-07-31T00:00:00Z</published>
    <updated>2013-07-31T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Never was so much coded by so many to achieve so little.&lt;/p&gt;

&lt;p&gt;Fortunately on my &lt;a href='https://trello.com/b/Bi7XqDyM/impress-js-summer-of-code'&gt;to do list&lt;/a&gt; there are way more assignments to complete than testing. I should focus on writing script for automated animations with data-duration for each slide, animated effect for subsets, script for relative steps positioning and event listeners.&lt;/p&gt;

&lt;h3 id='today_i_learned'&gt;Today I Learned:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Solving problem in the night takes 7 times more than in the morningnext day. Mateusz insist on me to get back to coding principles. Try, how quickly you can get 10 out of &lt;a href='http://jsbin.com/ikoveg/5/edit'&gt;this code&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To sum up&lt;/em&gt;: SPARTA!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Leave her Alone - on Effective Teaching Practices</title>
    <link rel="alternate" href="http://lipen.co/til/leave-her-alone.html"/>
    <id>http://lipen.co/til/leave-her-alone.html </id>
    <published>2013-07-30T00:00:00Z</published>
    <updated>2013-07-30T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;John is right - it is better to write code 10 (100?) times slower without any help, than just ask somebody for help and get it done without any effort.&lt;/p&gt;

&lt;p&gt;That was the case with my &amp;#8216;substeps&amp;#8217;. While waiting for a call with my mentor Chris I proudly figured out the &lt;a href='https://github.com/lipenco/impress.js-substeps'&gt;code&lt;/a&gt; on my own. Let&amp;#8217;s see if I can make a step forward with further refactoring of my layouts.&lt;/p&gt;

&lt;h3 id='today_i_learned'&gt;Today I Learned:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I think it is only now that I understand power and use of indexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To sum up&lt;/em&gt;: Cannot wait for today&amp;#8217;s call with Bartek. Time for testing.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Substeps to Hell</title>
    <link rel="alternate" href="http://lipen.co/til/substeps-to-hell.html"/>
    <id>http://lipen.co/til/substeps-to-hell.html </id>
    <published>2013-07-29T00:00:00Z</published>
    <updated>2013-07-29T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is the crisis time. JavaScript doesn&amp;#8217;t listen to me. My super-cool-brand-new-features -substeps to impress.js don&amp;#8217;t work.&lt;/p&gt;

&lt;p&gt;Too many trials makes me nervous. Whatever it takes, I will make it to work.&lt;/p&gt;

&lt;h3 id='today_i_learned'&gt;Today I Learned:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Persistence, persistence, persistence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To sum up&lt;/em&gt;: Just another day with JS frustration.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>More is the New Less</title>
    <link rel="alternate" href="http://lipen.co/til/more-is-new-less.html"/>
    <id>http://lipen.co/til/more-is-new-less.html </id>
    <published>2013-07-24T00:00:00Z</published>
    <updated>2013-07-24T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Have you heard of the Single Responsibility Principle? Of course not – “you” don’t exist. I keep forgetting nobody is reading this blog;p. Well, Uncle Bob had a &lt;a href='http://vimeo.com/43592685'&gt;great talk&lt;/a&gt; about SRP.&lt;/p&gt;

&lt;p&gt;But I prefer to listen to my friend Mateusz, who has become my unofficial coach. Thanks to him, refactoring is my new favorite topic.&lt;/p&gt;

&lt;p&gt;Once one function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function layoutLinear(options) {    
    var distance = options.distance;    
    var elements = document.querySelectorAll(&amp;quot;.step&amp;quot;);    
    var position = 100;    
    var scale = 1;    
    if (!distance || distance &amp;lt; 900) {    
        distance = 1500;    
}    
for (var index = 0; index &amp;lt; elements.length; index++) {
    elements[index].dataset.x = position;
    position = position + distance;
    elements[index].dataset.scale = scale;
    if (index % 2 === 0) {
        scale = 2;
    } else {
        scale = 1;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now turned into 3 functions, way more sexy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function MoveElementsFromEachOther(distance, elements) {   
    var position = parseInt(elements[0].dataset.x);
    for (var index = 0; index &amp;lt; elements.length; index++) {
    position = position + distance;
    elements[index].dataset.x = position; 
    }
}

function RescaleEveryTwoElements(scale, elements) {
    for (var index = 0; index &amp;lt; elements.length; index+=2) {
    elements[index].dataset.scale = 2; 
    }
}

function layoutLinear(distance, scale) {
    var elements = document.querySelectorAll(&amp;quot;.step&amp;quot;);
    elements[0].dataset.x = 0;
    RescaleEveryTwoElements(scale, elements) ;
    MoveElementsFromEachOther(distance, elements) ;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a clearer structure without any difference in functionality. Seems like the magic of refactoring is measured is salary of a programmer who know how to do it right ;p But taking into account that my script generates 8 different layouts I saved a lot of space and memory while improving the readability.&lt;/p&gt;

&lt;h3 id='today_i_learned'&gt;Today I Learned:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The essence of refactoring.&lt;/li&gt;

&lt;li&gt;I am not young enough to know everthing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To sum up&lt;/em&gt;: &amp;#8220;When you sit down and solve the problem, the solution is merely just a first draft&amp;#8221; - S. Stefanov, Java Script Patterns.&lt;/p&gt;</content>
  </entry>
</feed>
